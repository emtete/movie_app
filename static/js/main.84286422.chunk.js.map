{"version":3,"sources":["style/Movie.module.css","style/App.module.css","Movie.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Movie","title","year","id","summary","medium_cover_image","className","style","movie","poster","src","alt","require","App","props","getMovies","Promise","axios","get","then","resp","movies","data","setState","isLoading","catch","state","this","container","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,OAAS,sBAAsB,QAAU,yB,kBCAxFD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,OAAS,sB,kKC4B/CC,MAlBf,YAA6E,IAA5DC,EAA2D,EAA3DA,MAAWC,GAAgD,EAApDC,GAAoD,EAAhDD,MAAME,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,mBACzC,OACE,yBAAKC,UAAS,UAAKC,IAAMC,QACvB,yBACEF,UAAS,UAAKC,IAAME,QACpBC,IAAKL,EACLM,IAAKV,EACLA,MAAOA,IAET,yBAAKK,UAAU,eACb,wBAAIA,UAAU,gBAAgBL,GAC9B,wBAAIK,UAAU,eAAeJ,GAC7B,yBAAKI,UAAS,UAAKC,IAAMH,UAAYA,M,gBClB7CQ,EAAQ,I,IA+EOC,E,kDA7Db,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAORC,UAAY,WACV,IAAIC,SAAQ,WACVC,IACGC,IAAI,0CACJC,MAAK,SAACC,GAAwB,IAIjBC,EAERD,EAHFE,KACEA,KAAQD,OAIZ,EAAKE,SAAS,CAAEF,SAAQG,WAAW,OAEpCC,OAAM,WACL,EAAKF,SAAS,CAAEC,WAAW,WArBjC,EAAKE,MAAQ,CACXF,WAAW,EACXH,OAAQ,IAJc,E,gEA6BxBM,KAAKZ,c,+BAGG,IAAD,EACuBY,KAAKD,MAA3BF,EADD,EACCA,UAAWH,EADZ,EACYA,OACnB,OACE,6BAASf,UAAS,UAAKC,IAAMqB,YAC1BJ,EACC,yBAAKlB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAS,UAAKC,IAAMc,SACtBA,EAAOQ,KAAI,SAACrB,GACX,OACE,kBAAC,EAAD,CACEsB,IAAKtB,EAAML,GACXA,GAAIK,EAAML,GACVD,KAAMM,EAAMN,KACZD,MAAOO,EAAMP,MACbG,QAASI,EAAMJ,QACfC,mBAAoBG,EAAMH,8B,GAnD1B0B,IAAMC,WCVJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.84286422.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__3uL4A\",\"poster\":\"Movie_poster__3OLpS\",\"summary\":\"Movie_summary__1xnVl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__y0aI6\",\"movies\":\"App_movies__3ABy3\"};","import React from \"react\";\nimport style from \"./style/Movie.module.css\";\n\ninterface MovieData {\n  title: string;\n  id: number;\n  year: number;\n  summary: string;\n  medium_cover_image: string;\n}\n\nfunction Movie({ title, id, year, summary, medium_cover_image }: MovieData) {\n  return (\n    <div className={`${style.movie}`}>\n      <img\n        className={`${style.poster}`}\n        src={medium_cover_image}\n        alt={title}\n        title={title}\n      ></img>\n      <div className='movie__data'>\n        <h3 className='movie__title'>{title}</h3>\n        <h5 className='movie__year'>{year}</h5>\n        <div className={`${style.summary}`}>{summary}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Movie;\n","import React from \"react\";\nimport axios, { AxiosResponse } from \"axios\";\nimport Movie from \"./Movie\";\nimport style from \"./style/App.module.css\";\n\nrequire(\"./style/App.css\");\n\ninterface iState {\n  isLoading: boolean;\n  movies: Array<MovieData>;\n}\n\ninterface Props {}\n\ninterface MovieData {\n  title: string;\n  id: number;\n  year: number;\n  summary: string;\n  medium_cover_image: string;\n}\n\nclass App extends React.Component<Props, iState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      movies: [],\n    };\n  }\n\n  getMovies = () => {\n    new Promise(() => {\n      axios\n        .get(\"https://yts.mx/api/v2/list_movies.json\")\n        .then((resp: AxiosResponse) => {\n          //\n          const {\n            data: {\n              data: { movies },\n            },\n          } = resp;\n\n          this.setState({ movies, isLoading: false });\n        })\n        .catch(() => {\n          this.setState({ isLoading: true });\n        });\n    });\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className={`${style.container}`}>\n        {isLoading ? (\n          <div className='loader'>\n            <span className='loader__text'>loading...</span>\n          </div>\n        ) : (\n          <div className={`${style.movies}`}>\n            {movies.map((movie: MovieData) => {\n              return (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  medium_cover_image={movie.medium_cover_image}\n                />\n              );\n            })}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}